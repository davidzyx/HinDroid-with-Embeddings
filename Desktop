{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os,sys,inspect\n",
    "currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\n",
    "parentdir = os.path.dirname(currentdir)\n",
    "sys.path.insert(0,parentdir) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import networkx as nx\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import sparse\n",
    "import random\n",
    "from tqdm import tqdm\n",
    "import collections\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "\n",
    "os.remove('./debug.log')\n",
    "logger = logging.getLogger('debug')\n",
    "hdlr = logging.FileHandler('./debug.log', mode='w')\n",
    "formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n",
    "hdlr.setFormatter(formatter)\n",
    "logger.addHandler(hdlr) \n",
    "logger.setLevel(logging.INFO)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create metapath"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import m2v\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['app_0', 'api_152532', 'api_110744', 'app_881']\n",
      "['app_0', 'api_110638', 'api_123212', 'app_1062']\n",
      "['app_0', 'api_4047', 'api_4046', 'app_1282']\n",
      "['app_0', 'api_236635', 'api_7202', 'app_969']\n",
      "['app_0', 'api_352437', 'api_352437', 'app_1282']\n",
      "['app_0', 'api_152496', 'api_379490', 'app_486']\n",
      "['app_0', 'api_150133', 'api_150133', 'app_474']\n",
      "['app_0', 'api_459', 'api_14242', 'app_897']\n",
      "['app_0', 'api_93111', 'api_93111', 'app_1185']\n",
      "['app_0', 'api_837', 'api_60755', 'app_826']\n",
      "CPU times: user 31.9 ms, sys: 5.95 ms, total: 37.9 ms\n",
      "Wall time: 506 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# test one iteration of metapath2vec\n",
    "# os.remove('./debug.log')\n",
    "logger = logging.getLogger('debug')\n",
    "hdlr = logging.FileHandler('./debug.log', mode='w')\n",
    "formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n",
    "hdlr.setFormatter(formatter)\n",
    "logger.addHandler(hdlr) \n",
    "logger.setLevel(logging.INFO)\n",
    "\n",
    "for i in range(10):\n",
    "    metapaths = list('ABA')\n",
    "    print(model.metapath2vec(metapaths, 0))\n",
    "# print(path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(model.metapath2vec(metapaths, 65), collections.Iterable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "A = sparse.load_npz(os.path.join(path, 'A_tr.npz'))\n",
    "B_tr = sparse.load_npz(os.path.join(path, 'B_tr.npz')).tocsr()\n",
    "P_tr = sparse.load_npz(os.path.join(path, 'P_tr.npz')).tocsr()\n",
    "\n",
    "model = m2v.Metapath2Vec(A, B_tr, P_tr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AA\n",
      "ABA\n",
      "APA\n",
      "ABPBA\n",
      "APBPA\n",
      "ABPBPBBPA\n",
      "ABABBABBBABBBBABBBBBA\n",
      "CPU times: user 2h 49min 28s, sys: 4min 44s, total: 2h 54min 13s\n",
      "Wall time: 2h 54min 44s\n"
     ]
    }
   ],
   "source": [
    "metas = ('AA','ABA', 'APA', 'ABPBA','APBPA','ABPBPBBPA','ABABBABBBABBBBABBBBBA')\n",
    "for meta in metas:\n",
    "    print(meta)\n",
    "    model.create_corpus(meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AA\n",
      "ABA\n",
      "APA\n",
      "ABPBA\n",
      "APBPA\n",
      "ABPBPBBPA\n",
      "ABABBABBBABBBBABBBBBA\n",
      "CPU times: user 3h 19min 31s, sys: 3min 48s, total: 3h 23min 19s\n",
      "Wall time: 3h 24min 59s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "A = sparse.load_npz(os.path.join(path, 'A_tst.npz'))\n",
    "B_tr = sparse.load_npz(os.path.join(path, 'B_tr.npz')).tocsr()\n",
    "P_tr = sparse.load_npz(os.path.join(path, 'P_tr.npz')).tocsr()\n",
    "\n",
    "model = m2v.Metapath2Vec(A, B_tr, P_tr)\n",
    "\n",
    "metas = ('AA','ABA', 'APA', 'ABPBA','APBPA','ABPBPBBPA','ABABBABBBABBBBABBBBBA')\n",
    "for meta in metas:\n",
    "    print(meta)\n",
    "    model.create_corpus(meta, '_tst')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ABABBABBBABBBBABBBBBA\n",
      "CPU times: user 2h 2min 43s, sys: 1min 30s, total: 2h 4min 13s\n",
      "Wall time: 2h 4min 42s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "A = sparse.load_npz(os.path.join(path, 'A_reduced_tr.npz'))\n",
    "B_tr = sparse.load_npz(os.path.join(path, 'B_reduced_tr.npz')).tocsr()\n",
    "P_tr = sparse.load_npz(os.path.join(path, 'P_reduced_tr.npz')).tocsr()\n",
    "\n",
    "model = m2v.Metapath2Vec(A, B_tr, P_tr)\n",
    "\n",
    "# metas = ('AA','ABA', 'APA', 'ABPBA','APBPA','ABPBPBBPA','ABABBABBBABBBBABBBBBA')\n",
    "metas = ['ABABBABBBABBBBABBBBBA']\n",
    "\n",
    "for meta in metas:\n",
    "    print(meta)\n",
    "    model.create_corpus(meta, '_reduced')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AA\n",
      "ABA\n",
      "APA\n",
      "ABPBA\n",
      "APBPA\n",
      "ABPBPBBPA\n",
      "ABABBABBBABBBBABBBBBA\n",
      "CPU times: user 3h 26min 44s, sys: 3min 19s, total: 3h 30min 3s\n",
      "Wall time: 3h 30min 29s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "A = sparse.load_npz(os.path.join(path, 'A_reduced_tst.npz'))\n",
    "B_tr = sparse.load_npz(os.path.join(path, 'B_reduced_tr.npz')).tocsr()\n",
    "P_tr = sparse.load_npz(os.path.join(path, 'P_reduced_tr.npz')).tocsr()\n",
    "\n",
    "model = m2v.Metapath2Vec(A, B_tr, P_tr)\n",
    "\n",
    "metas = ['AA','ABA', 'APA', 'ABPBA','APBPA','ABPBPBBPA','ABABBABBBABBBBABBBBBA']\n",
    "for meta in metas:\n",
    "    print(meta)\n",
    "    model.create_corpus(meta, '_reduced_tst')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model.create_corpus('ABABBABBBABBBBABBBBBA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %%time\n",
    "# path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "# A = sparse.load_npz(os.path.join(path, 'A_reduced_tst.npz'))\n",
    "# B_tr = sparse.load_npz(os.path.join(path, 'B_reduced_tr.npz')).tocsr()\n",
    "# P_tr = sparse.load_npz(os.path.join(path, 'P_reduced_tr.npz')).tocsr()\n",
    "# A_csr = A\n",
    "# A_csc = A.tocsc(copy=True)\n",
    "\n",
    "# model.create_corpus('ABABBABBBABBBBABBBBBA', '_tst')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train word embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_tst_file(CORPUS_TEST):\n",
    "    # check if the app number in the test corpus starts from 1335\n",
    "    f = open(CORPUS_TEST).readlines()\n",
    "    app_num = int(f[0].split()[0].split('_')[1])\n",
    "    if(app_num <A.shape[0]):\n",
    "        print('changing')\n",
    "        walks = []\n",
    "        for line in f:\n",
    "            walk = line.strip().split(' ')\n",
    "            walks.append([\n",
    "                f\"app_{int(node.split('_')[-1]) + 1335}\"\n",
    "                if node.startswith('app') else node\n",
    "                for node in walk\n",
    "            ])\n",
    "\n",
    "\n",
    "        f = open(CORPUS_TEST, \"w\")\n",
    "        for walk in walks:\n",
    "            f.write(' '.join(walk) + '\\n')\n",
    "        f.close()\n",
    "    else:\n",
    "        print('changed')\n",
    "        return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction(metapath):\n",
    "    from sklearn.svm import SVC\n",
    "    from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "    from sklearn.pipeline import Pipeline\n",
    "    fp = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/metapath_corpus'\n",
    "    CORPUS = os.path.join(fp, 'meta_%s.cor'%metapath)\n",
    "    CORPUS_TEST = os.path.join(fp, 'meta_%s_tst.cor'%metapath)\n",
    "#     print(CORPUS, CORPUS_TEST)\n",
    "    check_tst_file(CORPUS_TEST)\n",
    "    \n",
    "    \n",
    "    from gensim import utils\n",
    "    import gensim.models\n",
    "\n",
    "    class MyCorpus(object):\n",
    "        \"\"\"An interator that yields sentences (lists of str).\"\"\"\n",
    "        def __init__(self, CORPUS, CORPUS_TEST):\n",
    "            self.lines = open(CORPUS).readlines()\n",
    "    #         print(len(self.lines))\n",
    "            self.lines += open(CORPUS_TEST).readlines()  # !!! Test\n",
    "    #         print(len(self.lines))\n",
    "\n",
    "        def __iter__(self):\n",
    "            corpus_path = CORPUS\n",
    "            for line in tqdm(self.lines):\n",
    "                # assume there's one document per line, tokens separated by whitespace\n",
    "                yield line.strip().split(' ')\n",
    "    print('Creating model...')\n",
    "    sentences = MyCorpus(CORPUS, CORPUS_TEST)\n",
    "    model = gensim.models.Word2Vec(sentences=sentences, min_count=10, size=500, window=10)\n",
    "    \n",
    "    meta_tr = pd.read_csv(os.path.join(path, 'meta_tr.csv'), index_col=0)\n",
    "    meta_tst = pd.read_csv(os.path.join(path, 'meta_tst.csv'), index_col=0)\n",
    "\n",
    "    y_train = meta_tr.label == 'class1'\n",
    "    y_test = meta_tst.label == 'class1'\n",
    "\n",
    "    app_vec = np.array([model.wv[f'app_{i}'] for i in range(len(meta_tr))])\n",
    "    app_vec_tst = np.array([model.wv[f'app_{i}'] for i in range(len(meta_tr), len(meta_tr) + len(meta_tst))])\n",
    "    \n",
    "    # select best parameters\n",
    "#     print('Selecting best parameters...')\n",
    "#     param_grid = {'C': [1,10,100,1000,10000], 'kernel': ('linear', 'poly'), 'degree': np.arange(20)+1}\n",
    "#     svc = SVC(gamma='auto')\n",
    "#     clf = GridSearchCV(svc, param_grid, cv=5, return_train_score=True, iid=False, n_jobs=-1)\n",
    "#     best = clf.fit(app_vec, y_train).best_params_\n",
    "    \n",
    "    print('Training...')\n",
    "#     svm = SVC(kernel='poly', C=best['C'], degree=best['degree'], gamma='auto')\n",
    "    svm = SVC(kernel='linear')\n",
    "    svm.fit(app_vec, y_train)\n",
    "    \n",
    "    y_pred = svm.predict(app_vec_tst)\n",
    "    print('train_acc: ', svm.score(app_vec, y_train), '\\n')\n",
    "    print('test_acc: ', svm.score(app_vec_tst, y_test), '\\n')\n",
    "    tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()\n",
    "    print('tn', 'fp', 'fn', 'tp', '\\n')\n",
    "    print(tn, fp, fn, tp)\n",
    "    \n",
    "    return model, y_train, y_test, app_vec, app_vec_tst, y_pred\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:10<00:00, 245472.95it/s]\n",
      "100%|██████████| 2670000/2670000 [01:21<00:00, 32902.59it/s]\n",
      "100%|██████████| 2670000/2670000 [01:20<00:00, 33314.22it/s]\n",
      "100%|██████████| 2670000/2670000 [01:18<00:00, 34102.55it/s]\n",
      "100%|██████████| 2670000/2670000 [01:17<00:00, 34527.24it/s]\n",
      "100%|██████████| 2670000/2670000 [01:18<00:00, 34188.33it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training...\n",
      "train_acc:  1.0 \n",
      "\n",
      "test_acc:  0.49063670411985016 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "260 411 269 395\n",
      "CPU times: user 20min 12s, sys: 9.46 s, total: 20min 21s\n",
      "Wall time: 6min 48s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model, y_train, y_test, app_vec, app_vec_tst, y_pred = prediction('ABABBABBBABBBBABBBBBA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=0, splitter='best')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "clf = DecisionTreeClassifier(random_state=0)\n",
    "clf.fit(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48389513108614235"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(app_vec_tst, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=10, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "neigh = KNeighborsClassifier(n_neighbors=10)\n",
    "neigh.fit(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8958801498127341"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neigh.score(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4853932584269663"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neigh.score(app_vec_tst, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "clf = LogisticRegression(random_state=0).fit(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(app_vec, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.49138576779026216"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(app_vec_tst, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True, False, False,  True, False, False,  True,  True,  True,\n",
       "       False])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(app_vec_tst)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "app_1335     True\n",
       "app_1336    False\n",
       "app_1337     True\n",
       "app_1338     True\n",
       "app_1339    False\n",
       "app_1340     True\n",
       "app_1341     True\n",
       "app_1342    False\n",
       "app_1343     True\n",
       "app_1344    False\n",
       "Name: label, dtype: bool"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2669986/2669986 [00:02<00:00, 1042089.45it/s]\n",
      "100%|██████████| 2669986/2669986 [00:20<00:00, 132289.59it/s]\n",
      "100%|██████████| 2669986/2669986 [00:21<00:00, 124331.77it/s]\n",
      "100%|██████████| 2669986/2669986 [00:20<00:00, 131812.14it/s]\n",
      "100%|██████████| 2669986/2669986 [00:19<00:00, 135255.83it/s]\n",
      "100%|██████████| 2669986/2669986 [00:21<00:00, 126199.10it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.9962546816479401 \n",
      "\n",
      "test_acc:  0.9228464419475655 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "667 4 99 565\n",
      "ABA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:03<00:00, 882552.36it/s]\n",
      "100%|██████████| 2670000/2670000 [00:23<00:00, 112374.75it/s]\n",
      "100%|██████████| 2670000/2670000 [00:23<00:00, 112013.76it/s]\n",
      "100%|██████████| 2670000/2670000 [00:24<00:00, 110606.04it/s]\n",
      "100%|██████████| 2670000/2670000 [00:22<00:00, 116127.59it/s]\n",
      "100%|██████████| 2670000/2670000 [00:22<00:00, 117756.14it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.9962546816479401 \n",
      "\n",
      "test_acc:  0.9827715355805243 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "661 10 13 651\n",
      "APA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:03<00:00, 824874.69it/s]\n",
      "100%|██████████| 2670000/2670000 [00:24<00:00, 107872.99it/s]\n",
      "100%|██████████| 2670000/2670000 [00:24<00:00, 108543.44it/s]\n",
      "100%|██████████| 2670000/2670000 [00:24<00:00, 110809.83it/s]\n",
      "100%|██████████| 2670000/2670000 [00:25<00:00, 106143.43it/s]\n",
      "100%|██████████| 2670000/2670000 [00:23<00:00, 112634.04it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.9737827715355806 \n",
      "\n",
      "test_acc:  0.8741573033707866 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "655 16 152 512\n",
      "ABPBA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:04<00:00, 660038.83it/s]\n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 92728.67it/s] \n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 92650.54it/s] \n",
      "100%|██████████| 2670000/2670000 [00:29<00:00, 91531.33it/s] \n",
      "100%|██████████| 2670000/2670000 [00:27<00:00, 95591.35it/s] \n",
      "100%|██████████| 2670000/2670000 [00:29<00:00, 91188.64it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.998501872659176 \n",
      "\n",
      "test_acc:  0.8441947565543071 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "663 8 200 464\n",
      "APBPA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:04<00:00, 649428.23it/s]\n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 92240.22it/s] \n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 94647.67it/s] \n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 93466.69it/s] \n",
      "100%|██████████| 2670000/2670000 [00:28<00:00, 92207.36it/s] \n",
      "100%|██████████| 2670000/2670000 [00:29<00:00, 90327.17it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.9865168539325843 \n",
      "\n",
      "test_acc:  0.49737827715355803 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "0 671 0 664\n",
      "ABPBPBBPA\n",
      "changed\n",
      "Creating model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2670000/2670000 [00:05<00:00, 460753.61it/s]\n",
      "100%|██████████| 2670000/2670000 [00:39<00:00, 67779.19it/s]\n",
      "100%|██████████| 2670000/2670000 [00:37<00:00, 70552.89it/s]\n",
      "100%|██████████| 2670000/2670000 [00:37<00:00, 71870.51it/s]\n",
      "100%|██████████| 2670000/2670000 [00:37<00:00, 72126.10it/s]\n",
      "100%|██████████| 2670000/2670000 [00:36<00:00, 72374.64it/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selecting best parameters...\n",
      "Training...\n",
      "train_acc:  0.998501872659176 \n",
      "\n",
      "test_acc:  0.5348314606741573 \n",
      "\n",
      "tn fp fn tp \n",
      "\n",
      "283 388 233 431\n",
      "CPU times: user 30min 25s, sys: 36 s, total: 31min 1s\n",
      "Wall time: 18min 1s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "metas = ('AA','ABA', 'APA', 'ABPBA','APBPA', 'ABPBPBBPA')\n",
    "for meta in metas:\n",
    "    print(meta)\n",
    "    prediction(meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "param_grid = {'C': [1,10,100,1000,10000], 'kernel': ('linear', 'poly'), 'degree': np.arange(20)+1}\n",
    "svc = SVC(gamma='auto')\n",
    "clf = GridSearchCV(svc, param_grid, cv=5, return_train_score=True, iid=False, n_jobs=-1)\n",
    "best = clf.fit(app_vec, y_train).best_params_\n",
    "best"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best['C']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "def tsne_plot(model):\n",
    "    \"Creates and TSNE model and plots it\"\n",
    "    embs = {}\n",
    "\n",
    "    for word in model.wv.vocab:\n",
    "        if 'api' in word: continue\n",
    "        embs[word] = model.wv[word]\n",
    "    \n",
    "    tsne_model = TSNE(n_components=2, random_state=0)\n",
    "    new_values = tsne_model.fit_transform(list(embs.values()))\n",
    "\n",
    "    token_coor = dict(zip(embs.keys(), new_values))\n",
    "\n",
    "    plt.figure(figsize=(16, 12))\n",
    "    cycle = plt.rcParams['axes.prop_cycle'].by_key()['color']\n",
    "\n",
    "    for token, coor in token_coor.items():\n",
    "        x, y = coor\n",
    "        label = meta_tr[meta_tr.app_id == token].label.item()\n",
    "        color = cycle[0] if label == 'class1' else cycle[1]\n",
    "        plt.scatter(x, y, c=color, alpha=0.8)\n",
    "# #         plt.annotate(labels[i],\n",
    "# #                      xy=(x[i], y[i]),\n",
    "# #                      xytext=(5, 2),\n",
    "# #                      textcoords='offset points',\n",
    "# #                      ha='right',\n",
    "# #                      va='bottom')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "meta_tr = pd.read_csv(os.path.join(path, 'meta_tr.csv'), index_col=0)\n",
    "meta_tr['app_id'] = [f'app_{i}' for i in range(meta_tr.shape[0])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:23: FutureWarning: `item` has been deprecated and will be removed in a future version\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "can only convert an array of size 1 to a Python scalar",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<timed eval>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-27-cc82c9e4505d>\u001b[0m in \u001b[0;36mtsne_plot\u001b[0;34m(model)\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mtoken\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcoor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtoken_coor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcoor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeta_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmeta_tr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapp_id\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mtoken\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m         \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcycle\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'class1'\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcycle\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/base.py\u001b[0m in \u001b[0;36mitem\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    738\u001b[0m             \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    739\u001b[0m         )\n\u001b[0;32m--> 740\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    741\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    742\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: can only convert an array of size 1 to a Python scalar"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%time\n",
    "tsne_plot(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '/datasets/dsc180a-wi20-public/Malware/group_data/group_01/pipeline_output'\n",
    "label = pd.read_csv(os.path.join(path, 'meta_tr.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reduce_dimensions(model):\n",
    "    num_dimensions = 2  # final num dimensions (2D, 3D, etc)\n",
    "\n",
    "    vectors = []  # positions in vector space\n",
    "    labels = []  # keep track of words to label our data again later\n",
    "    for word in model.wv.vocab:\n",
    "        if 'app' in word:\n",
    "            if (label.iloc[int(word.split('_')[1]), 1] == 'class1'):\n",
    "                labels.append(1)\n",
    "            else:\n",
    "                labels.append(0)\n",
    "\n",
    "            vectors.append(model.wv[word])\n",
    "            # labels.append(word)\n",
    "\n",
    "    # convert both lists into numpy vectors for reduction\n",
    "    vectors = np.asarray(vectors)\n",
    "    labels = np.asarray(labels)\n",
    "    # reduce using t-SNE\n",
    "    vectors = np.asarray(vectors)\n",
    "    tsne = TSNE(n_components=num_dimensions, random_state=0)\n",
    "    vectors = tsne.fit_transform(vectors)\n",
    "\n",
    "    x_vals = [v[0] for v in vectors]\n",
    "    y_vals = [v[1] for v in vectors]\n",
    "    return x_vals, y_vals, labels\n",
    "\n",
    "\n",
    "def plot_with_plotly(x_vals, y_vals, labels, metapath, plot_in_notebook=True):\n",
    "    from plotly.offline import init_notebook_mode, iplot, plot\n",
    "    import plotly.graph_objs as go\n",
    "\n",
    "    fig = go.Figure()\n",
    "    \n",
    "    fig.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='markers',\n",
    "                       text=labels, marker=dict(size=5, color=labels)))\n",
    "    \n",
    "    fig.update_layout(\n",
    "        title = \"Scatter graph of metapath: \" + metapath,\n",
    "#         xaxis_title=\"x Axis Title\",\n",
    "#         yaxis_title=\"y Axis Title\",\n",
    "        font=dict(\n",
    "            family=\"Courier New, monospace\",\n",
    "            size=18,\n",
    "            color=\"#7f7f7f\"\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    fig.show()\n",
    "    \n",
    "#     data = [trace]\n",
    "\n",
    "#     if plot_in_notebook:\n",
    "#         init_notebook_mode(connected=True)\n",
    "#         iplot(data, filename='word-embedding-plot')\n",
    "#     else:\n",
    "#         plot(data, filename='word-embedding-plot.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "x_vals, y_vals, labels = reduce_dimensions(model)\n",
    "plot_with_plotly(x_vals, y_vals, labels, 'AA')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
